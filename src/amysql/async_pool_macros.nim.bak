import macros
import ./async_pool
export async_pool
import asyncdispatch

macro asyncPooled*(prc:untyped):untyped =
  result = nnkStmtList.newTree
  result.add prc
  let tyAsyncPool = bindSym"AsyncPool" 
  let getFreeConnIdx = bindSym"getFreeConnIdx"
  let oldBody = prc.body.copy
  var awaitDefinition = quote:
    template await(f: typed): untyped {.used.} =
      static:
        error "await expects Future[T], got " & $typeof(f)

    template await[T](f: Future[T]): auto {.used.} =
      var internalTmpFuture: FutureBase = f
      yield internalTmpFuture
      (cast[type(f)](internalTmpFuture)).read()
  result.add awaitDefinition
  var newPrc = prc.copy
  
  let conIdx = ident"conIdx"
  let conn = prc.params[1][0]
  let getConn = nnkStmtList.newTree(
        nnkLetSection.newTree(
          nnkIdentDefs.newTree(
            conIdx,
            newEmptyNode(),
            nnkCommand.newTree(
              ident"await",
              nnkCall.newTree(
                nnkDotExpr.newTree(
                  conn,
                  getFreeConnIdx
                )
              )
            )
          )
        ),
        nnkLetSection.newTree(
          nnkIdentDefs.newTree(
            conn,
            newEmptyNode(),
            nnkBracketExpr.newTree(
              nnkDotExpr.newTree(
                conn,
                newIdentNode("conns")
              ),
              conIdx
            )
          )
        )
      )
  newPrc.body = nnkStmtList.newTree(
    getConn,
    oldBody
  )
  newPrc.params[1] = nnkIdentDefs.newTree(
    conn,
    tyAsyncPool,
    newEmptyNode()
  )
  result.add newPrc
